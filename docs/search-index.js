var searchIndex = JSON.parse('{\
"miniraft":{"doc":"This crate is a minimal implementation of the Raft …","t":"AAAAGENNEDNNNNLLLLLFLLLLLLLLLFFFLFLLLLLFLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDGMLMLLLLLLMMLMLLLKLLLLLMMLKLLLLLLLLDNDNNEGNEDNDNMLLLLLLLLLLLLMMMMLLLLLMLLMLLLLLLLLLLLLMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLNDNDNDDDEDGGMLLLLLLLLLLLLLLLLLMLMMLLLLLLLMMLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["debug","log","rpc","server","Annotation","AnnotationType","Index","Length","Level","Logger","Overview","Requests","Span","Trace","added_follower","append_conflict_check","append_entries","append_entries_recv","append_response","assertion","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bumping_term","check_matching_term","client_request","colour_bool","colour_server","colour_term","commit_entry","debug_log","election_timer_expired","fmt","from","from","from","init_logger","into","into","into","log","log_append","log_apply","log_deliver_apply","log_deliver_recv","log_potential_conflict","log_term_conflict","outgoing_rpcs","process_append_response","receive_rpc","replicate_entries","rpc_append_request","rpc_vote_request","rpc_vote_resp","rpc_vote_result","send_heartbeat","server_init","state_update","to_string","total_vote_count","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vote_count","vzip","vzip","vzip","won_election","App","Log","LogEntry","LogIndex","app","append_entries","applied_len","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","committed_len","data","deliver_msg","entries","fmt","from","from","get_state","into","into","last_idx","last_term","new","parent_id","term","to_owned","transition_fn","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AppendRequest","AppendRequest","AppendResponse","AppendResponse","Broadcast","RPC","SendableMessage","Single","Target","VoteRequest","VoteRequest","VoteResponse","VoteResponse","ack_idx","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candidate_id","candidate_last_log_idx","candidate_last_log_term","candidate_term","clone","clone","clone_into","clone_into","cmp","entries","eq","fmt","follower_id","from","from","from","from","from","from","into","into","into","into","into","into","leader_commit","leader_id","leader_last_log_idx","leader_last_log_term","leader_term","ok","partial_cmp","term","term","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vote_granted","votee_id","vzip","vzip","vzip","vzip","vzip","vzip","Candidate","CandidateState","Follower","FollowerState","Leader","LeaderState","NodeReplicationState","RaftConfig","RaftLeadershipState","RaftServer","ServerId","Term","acked_up_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client_request","clone","clone_into","current_term","default","election_timeout","election_timeout_jitter","from","from","from","from","from","from","from","heartbeat_interval","id","into","into","into","into","into","into","into","is_candidate","is_follower","is_leader","log","new","promote_to_leader","quorum_size","receive_rpc","sent_up_to","tick","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["miniraft","","","","miniraft::debug","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniraft::log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniraft::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniraft::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Module for pretty printing state transitions, log updates, …","Module containing implementation for an event log. This is …","Module containing definitions for all of the RPCs that …","Module containing majority of the logic for handling RPCs, …","A tuple representing an annotation message and its …","Internal debug message to dump contents of entries and …","Mark a specific log index","Mark a length of the log starting from the beginning","Level of logging","Wrapper struct that contains methods for logging specific …","State transitions + RPCs","function calls","Mark a section of the log","inner function workings","log adding a follower under a leader","checking for potential log conflict before appending","log follower appending entries from leader","called when a node receives a request to append entries","log leader receiving response from follower re: …","Helper function to log a test check","","","","","","","log when a term change/update has occurred","rpc request pre-req: ensure term matches before continuing","log client API calls","Helper function to pretty print a boolean","Helper function to pretty print a <code>ServerId</code> with a unique …","Helper function to pretty print a <code>Term</code>","log decision making process on a leader about whether to …","Pretty print a set of <code>Annotations</code> over a vector of …","candidate/follower election timeout reached","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the logger (default uses microseconds)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Helper function to pretty print a message at the …","details about actually appending to the log","details about applying a number of log entries to the …","called when log entries are done being applied to state …","called when delivering a single log entry to the …","called on potential log conflict when appending entries","detected a term conflict, log details about truncation","log single outgoing rpc request (including type and target)","log decision making process for leader when updating its …","log incoming rpc request (including type and received from)","log when leader prepares to replicate log entries to …","log when follower receives a request to append log entries …","follower receiving a request from a candidate to vote for …","candidate receiving a vote result from a follower","explain follower decision making for whether to vote for …","leader sending heartbeat to followers","initializing a server","log a leadership state transition","","log total votes for candidate","","","","","","","","","","log decision making process for candidate deciding whether …","","","","log election states upon winning","Describes a state machine that is updated bassed off of a …","A collection of LogEntries","A single log entry","Type alias for indexing into the <code>Log</code>","State machine","Append additional entries to the log. <code>prefix_idx</code> is what …","How much of the log has been applied to the state machine. …","","","","","","","How much of the log has been considered committed. A log …","Actual payload","Deliver a single message from the message log to the …","Log entries","","Returns the argument unchanged.","Returns the argument unchanged.","Return the current state of the application","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get index of the last element","Fetch the most recent term we have recorded in the log","Instantiate a new empty event log","<code>ServerId</code> of our parent for pretty printing documentation","What term it was submitted","","Function that mutates the application state depending on …","","","","","","","","","Request from leader to append entries to follower’s log","Leader heartbeat/appending entries to followers","Response to an <code>AppendRequest</code>","Response to <code>AppendRequest</code>","To everyone","A Raft RPC request","A message can be either targeted at a single server or to …","A single server","Whether to send a message to everyone or just a single node","Request by a candidate to become a Raft leader","Candidate requesting to become leader","Response to a <code>VoteRequest</code>","Response to <code>VoteRequest</code>","Index of the last log entry we appended to the log","","","","","","","","","","","","","ID of candidate requesting a vote","Index of candidate’s last log entry","Term of candidate’s last log entry","Current term of candidate","","","","","","A list of consecutive log entries to append to follower","","","Follower ID","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Leader’s <code>committed_len</code>","ID of leader (used so follower can redirect clients)","Log index immediately preceding index of next element in …","Term of <code>leader_last_log_idx</code>","Term of leader requesting log append","Whether the follower added it to their log or not","","<code>current_term</code> of server for candidate to update itself","<code>current_term</code> of server for candidate to update itself","","","","","","","","","","","","","","","","","","","","","","Whether the <code>VoteRequest</code> was granted or not","Who sent the vote","","","","","","","Used to elect a new leader.","<code>Candidate</code> specific volatile state","Issues no requests but responds to requests from leaders …","<code>Follower</code> specific volatile state","Handles all client requests.","<code>Leader</code> specific volatile state","State of a single Node as tracked by a leader","Configuration options for a Raft server","Possible states a Raft Node can be in","A Raft server that replicates Logs of type <code>T</code>","Type alias for the ID of a single Raft server","Type alias for Raft leadership term","Index of highest log entry known to be replicated on …","","","","","","","","","","","","","","","Public interface for clients to request adding log entries …","","","Current term of this node","","How long a server should wait for a message from current …","How much random jitter to add to <code>election_timeout</code>","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","How often a leader should send empty ‘heartbeat’ …","ID of this node","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether current node is a <code>Candidate</code>","Whether current node is a <code>Follower</code>","Logging helpers /// Whether current node is a <code>Leader</code>","List of log entries for this node. This is the data that …","Create a new Raft node with a given ID. Caller is …","Manually promote node to leader. Do not call during normal …","Calculate quorum of current set of peers. quorum = …","Demultiplex incoming RPC to its correct receiver function","Index of next log entry to send to that server. …","Tick state and perform necessary state transitions/RPC …","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,36,36,0,0,13,13,36,13,37,37,37,37,37,0,13,36,37,13,36,37,37,37,37,0,0,0,37,0,37,13,13,36,37,0,13,36,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,13,37,13,36,37,13,36,37,13,36,37,37,13,36,37,37,0,0,0,0,6,6,6,6,25,6,25,25,25,6,25,6,6,25,6,25,26,6,25,6,6,6,6,25,25,26,6,25,6,25,6,25,6,25,0,20,0,20,28,0,0,28,0,0,20,0,20,9,20,21,22,9,28,3,20,21,22,9,28,3,21,21,21,21,28,3,28,3,28,3,28,20,9,20,21,22,9,28,3,20,21,22,9,28,3,3,3,3,3,3,9,28,22,9,28,3,20,20,21,22,9,28,3,20,21,22,9,28,3,20,21,22,9,28,3,22,22,20,21,22,9,28,3,38,0,38,0,38,0,0,0,0,0,0,0,19,38,39,40,41,1,32,19,38,39,40,41,1,32,19,1,32,32,1,19,32,32,38,39,40,41,1,32,19,32,1,38,39,40,41,1,32,19,1,1,1,1,1,1,1,1,19,1,32,38,39,40,41,1,32,19,38,39,40,41,1,32,19,38,39,40,41,1,32,19,38,39,40,41,1,32,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,3]],[[1,4,4,5]],[[6,7,7,8]],[[1,9]],[10],[[]],[[]],[[]],[[]],[[]],[[]],[[1,11]],[[2,3,11]],[1],[4,10],[2,10],[11,10],[[2,7,5,5]],[[8,[8,[12]],7],10],[1],[[13,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,10,13]],[[6,7]],[[6,7]],[6],[6],[[6,8,7,7]],[6],[[1,[8,[[18,[[0,[16,17]]]]]]],[[8,[[18,[[0,[16,17]]]]]]]],[[2,9,19]],[[1,20]],[[1,8,2,7]],[[1,3]],[[1,21]],[[1,22]],[[1,4,4,4]],[1],[1],[1],[[],10],[[2,5,5]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[2,22,4]],[[]],[[]],[[]],[[1,5,8]],0,0,0,0,0,[[6,7,7,[8,[25]]]],0,[[]],[[]],[[]],[[]],[[[25,[17]]],[[25,[17]]]],[[]],0,0,[6],0,[[[25,[16]],14],15],[[]],[[]],[[]],[[]],[[]],[6,7],[6,11],[[2,[27,[26]]],6],0,0,[[]],[25],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[28,28],[[[3,[17]]],[[3,[17]]]],[[]],[[]],[[28,28],29],0,[[28,28],4],[[20,14],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[28,28],[[30,[29]]]],0,0,[[]],[[]],[[],10],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,31],[32,32],[[]],0,[[],19],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,4],[1,4],[1,4],0,[[2,[33,[2]],32,[30,[34]],[27,[26]]],1],[[1,[35,[2,19]]],[[8,[18]]]],[1,5],[[1,20],[[8,[18]]]],0,[1,[[8,[18]]]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"RaftServer"],[6,"ServerId"],[3,"AppendRequest"],[15,"bool"],[15,"usize"],[3,"Log"],[6,"LogIndex"],[3,"Vec"],[3,"AppendResponse"],[3,"String"],[6,"Term"],[6,"Annotation"],[4,"Level"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Clone"],[6,"SendableMessage"],[3,"NodeReplicationState"],[4,"RPC"],[3,"VoteRequest"],[3,"VoteResponse"],[4,"Result"],[3,"TypeId"],[3,"LogEntry"],[8,"App"],[3,"Box"],[4,"Target"],[4,"Ordering"],[4,"Option"],[6,"Result"],[3,"RaftConfig"],[3,"BTreeSet"],[15,"u64"],[3,"BTreeMap"],[4,"AnnotationType"],[3,"Logger"],[4,"RaftLeadershipState"],[3,"FollowerState"],[3,"CandidateState"],[3,"LeaderState"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
